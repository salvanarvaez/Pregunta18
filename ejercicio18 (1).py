# -*- coding: utf-8 -*-
"""Ejercicio18

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hKGxOw_-rs49P3dLY6EOlN8HtQElfmW4

# Ejericico 18
**Nombre:** Salva N.  
**Matrícula:** A0571848  
**Materia:** Series de Tiempo    
**Fecha:** Junio 2025
"""

# 📚 Librerías
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.stattools import adfuller, kpss
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.arima.model import ARIMA
from google.colab import files

# 🔼 Subir archivo .txt
uploaded = files.upload()
filename = list(uploaded.keys())[0]

# 🧹 Leer datos del archivo
with open(filename, "r") as f:
    lines = f.readlines()

data_lines = lines[10:]
data_cleaned = [line.strip().split() for line in data_lines if len(line.strip().split()) == 6]
columns = ["YEAR", "GDP", "PDI", "PCE", "PROFITS", "DIVIDENDS"]
df = pd.DataFrame(data_cleaned, columns=columns).astype(float)

# 🕓 Índice temporal trimestral
df["DATE"] = pd.date_range(start="1970-01-01", periods=len(df), freq='Q')
df.set_index("DATE", inplace=True)

# 🔍 Logaritmo natural del PDI
df["log_PDI"] = np.log(df["PDI"])

# 📊 Graficar log(PDI)
plt.figure(figsize=(10, 4))
plt.plot(df["log_PDI"])
plt.title("Serie Log(PDI)")
plt.grid(True)
plt.show()

# 📈 Pruebas de estacionariedad
def test_stationarity(series):
    print("📉 ADF Test:")
    adf = adfuller(series)
    print(f"ADF p-value: {adf[1]:.4f} {'(Estacionaria)' if adf[1] < 0.05 else '(No estacionaria)'}")
    print("\n📉 KPSS Test:")
    kpss_stat = kpss(series, regression='c', nlags="auto")
    print(f"KPSS p-value: {kpss_stat[1]:.4f} {'(Estacionaria)' if kpss_stat[1] >= 0.05 else '(No estacionaria)'}")

print("🔍 Pruebas para log(PDI)")
test_stationarity(df["log_PDI"])

# ⚙️ Primera diferencia
df["log_PDI_diff"] = df["log_PDI"].diff()

print("\n🔍 Pruebas para Δlog(PDI)")
test_stationarity(df["log_PDI_diff"].dropna())

# 📉 Graficar ACF y PACF
plt.figure(figsize=(14,5))
plt.subplot(1,2,1)
plot_acf(df["log_PDI_diff"].dropna(), ax=plt.gca(), lags=20)
plt.title("ACF Δlog(PDI)")
plt.subplot(1,2,2)
plot_pacf(df["log_PDI_diff"].dropna(), ax=plt.gca(), lags=20)
plt.title("PACF Δlog(PDI)")
plt.tight_layout()
plt.show()

# 🧪 Ajustar modelos AR, MA, ARMA, ARIMA
from statsmodels.tsa.arima.model import ARIMA

def fit_model(order, name):
    try:
        model = ARIMA(df["log_PDI"], order=order).fit()
        print(f"{name} {order} - AIC: {model.aic:.2f}")
        return model
    except:
        print(f"{name} {order} - Falló")
        return None

# Modelos candidatos
print("\n📌 Modelos AR(p)")
ar_models = [fit_model((p,1,0), f"AR({p})") for p in range(1, 4)]

print("\n📌 Modelos MA(q)")
ma_models = [fit_model((0,1,q), f"MA({q})") for q in range(1, 4)]

print("\n📌 Modelos ARMA(p,q)")
arma_models = [fit_model((p,1,q), f"ARMA({p},{q})") for p in range(1,3) for q in range(1,3)]

print("\n📌 Mejor modelo ARIMA(p,d,q)")
best_aic = np.inf
best_model = None
best_order = None

for p in range(4):
    for q in range(4):
        try:
            model = ARIMA(df["log_PDI"], order=(p,1,q)).fit()
            if model.aic < best_aic:
                best_aic = model.aic
                best_model = model
                best_order = (p,1,q)
        except:
            continue

print(f"🏆 Mejor ARIMA: {best_order} con AIC={best_aic:.2f}")

# 📈 Pronóstico
forecast_steps = 8
forecast = best_model.get_forecast(steps=forecast_steps)
pred = forecast.predicted_mean
ci = forecast.conf_int()

plt.figure(figsize=(10, 4))
plt.plot(df["log_PDI"], label="Histórico")
plt.plot(pred.index, pred, label="Pronóstico", color="red")
plt.fill_between(pred.index, ci.iloc[:,0], ci.iloc[:,1], color="pink", alpha=0.3)
plt.title(f"Pronóstico ARIMA{best_order}")
plt.legend()
plt.grid(True)
plt.show()